name: STA-AEMY - Upload to SharePoint

description: |
  Uploads the import zip file to SharePoint. The zip file is downloaded from a URL and extracted. The contents are uploaded to SharePoint.
  The upload is done using the SharePoint Upload Action.
  The action is triggered by a workflow dispatch event with inputs for the zip URL and AEMY context.

env:
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  # AZURE_CLIENT_ID might be considered the AZURE APP ID, but that meaning can be unclear.
  AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  # Base-64 thumbnail
  AZURE_THUMBNAIL_BASE64: ${{ secrets.AZURE_THUMBNAIL_BASE64 }}
  # Base-64 encoded key
  AZURE_PRIVATE_KEY_BASE64: ${{ secrets.AZURE_PRIVATE_KEY_BASE64 }}
on:
  workflow_dispatch:
    inputs:
      # Zip URL is only valid for 60 minutes.
      zip_url:
        description: 'The URL of the zip file to download.'
        required: true
      aemy_callbacks:
        description: 'The AEMY context as a string.'
        required: true
        type: password
      aemy_context:
        description: 'The AEMY context as a string.'
        required: true
      action_url:
        description: 'The URL of the repo to check the progress or the results of a workflow.'
        required: false
      rootMountPoint:
        description: 'The mount point mapped to the root of the SharPoint site. If not provided, a root mount point will be extracted from the fstab.yaml file.'
        required: false

permissions:
  contents: write

jobs:
  read-and-upload-import-zip:
    runs-on: ubuntu-latest

    steps:
      - name: Check inputs
        shell: bash
        run: |
          echo NPM Version:
          npm --version
          
          # Optional parameters
          if [ -n "${{ github.event.inputs.action_url }}" ]; then
            ACTION_URL="JS_LFJS_LF🕵 See the Action URL to check the progress or the results of the workflow: ${{ github.event.inputs.action_url }}"
            echo "ACTION_URL=$ACTION_URL" >> $GITHUB_ENV
          fi
          if [ -n "${{ github.event.inputs.rootMountPoint }}" ]; then
            ROOT_MOUNT_POINT="${{ github.event.inputs.rootMountPoint }}"
            echo "ROOT_MOUNT_POINT=$ROOT_MOUNT_POINT" >> $GITHUB_ENV
          fi
          
          # Required parameters
          missing_vars=""
          bad_format=""
      
          if [ -z "${{ env.AZURE_TENANT_ID }}" ]; then
            missing_vars+="JS_LF- AZURE_TENANT_ID "
          fi
          if [ -z "${{ env.AZURE_CLIENT_ID }}" ]; then
            missing_vars+="JS_LF- AZURE_CLIENT_ID "
          fi
          if [ -z "${{ env.AZURE_THUMBNAIL_BASE64 }}" ]; then
            missing_vars+="JS_LF- AZURE_THUMBNAIL_BASE64 "
          elif ! [[ "${{ env.AZURE_THUMBNAIL_BASE64 }}" =~ ^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$ ]]; then
            bad_format+="JS_LF- AZURE_PRIVATE_KEY_BASE64 "
          fi
          if [ -z "${{ env.AZURE_PRIVATE_KEY_BASE64 }}" ]; then
            missing_vars+="JS_LF- AZURE_PRIVATE_KEY_BASE64 "
          elif ! [[ "${{ env.AZURE_PRIVATE_KEY_BASE64 }}" =~ ^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$ ]]; then
            bad_format+="JS_LF- AZURE_PRIVATE_KEY_BASE64"
          fi

          if [ -n "$missing_vars" ]; then
            errorMessage="❌ The following variables are not set in your GitHub repo: $missing_vars JS_LF"
            echo "errorMessage=$errorMessage" >> $GITHUB_ENV
          fi
          if [ -n "$bad_format" ]; then
            errorMessage+="❌ The following variables in your GitHub repo are in the wrong format: $bad_format"
            echo "errorMessage=$errorMessage" >> $GITHUB_ENV
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up actions
        run: |
          cd .github/actions/sta-status
          npm install
          cd ../../.github/actions/sta-sp-drive
          npm install
          cd ../../.github/actions/sta-azure-helper
          npm install

      - name: Missing inputs error check
        if: ${{ env.errorMessage != '' }}
        uses: ./.github/actions/sta-status
        with:
          callbacks: ${{ github.event.inputs.aemy_callbacks }}
          context: ${{ github.event.inputs.aemy_context }}
          message: ${{ env.errorMessage }}
          status_type: error
          agent_name: upload-import-sp

      - name: Progress 1 - Setup
        uses: ./.github/actions/sta-status
        with:
          callbacks: ${{ github.event.inputs.aemy_callbacks }}
          context: ${{ github.event.inputs.aemy_context }}
          message: Inputs look good. Now setting up the upload. (Step 1 of 5).
          status_type: progress
          agent_name: upload-import-sp

      - name: Create temp directory
        run: |
          # Create temp directory to download the zip and extract its contents into.
          temp_dir=$(mktemp -d)
          if [ $? -ne 0 ]; then
            message="Could not create a temporary folder for extraction. ${{ env.ACTION_URL }}"
            echo "errorMessage=message" >> $GITHUB_ENV
          fi
          echo "temp_dir=${temp_dir}" >> $GITHUB_ENV

      - name: Temp direction creation error check
        if: ${{ env.errorMessage != '' }}
        uses: ./.github/actions/sta-status
        with:
          callbacks: ${{ github.event.inputs.aemy_callbacks }}
          context: ${{ github.event.inputs.aemy_context }}
          message: ${{ env.errorMessage }}
          status_type: error
          agent_name: upload-import-sp

      - name: Install dependencies
        run: |
          sudo apt-get install -y unzip jq uuid-runtime openssl

      - name: Read fstab file
        id: fstab_data
        if: ${{ !env.ROOT_MOUNT_POINT }}
        uses: pietrobolcato/action-read-yaml@1.1.0
        with:
          config: ${{ github.workspace }}/fstab.yaml

      - name: Set up the mountpoints and folders
        if: ${{ !env.ROOT_MOUNT_POINT }}
        env:
          FSTAB_CONTEXT: ${{ toJson(steps.fstab_data.outputs) }}
        run: |
          echo "FSTAB_CONTEXT $FSTAB_CONTEXT"
          mountpoints='{ ';
          folders='{ ';
          foundFolders=false;
          while read line; do
            if (echo "$line" | grep -q 'folders:'); then
              foundFolders=true
              echo Skipping...
              continue;
            fi
            if (echo "$line" | grep -q 'mountpoints:'); then
              echo Skipping...
              continue;
            fi
            if [ -z "$line" ]; then
              echo Skipping...
              continue;
            fi
            name=$(echo "$line" | cut -f1 -d:)
            value=$(echo "$line" | cut -f2- -d: | cut -c2-)
            next="\"$name\": \"$value\""
            if ($foundFolders); then
              if [ "$folders" == "{ " ]; then
                folders+="$next"
              else
                folders+=", $next"
              fi
            else
              if [ "$name" == "/" ]; then
                echo "ROOT_MOUNT_POINT=$value" >> $GITHUB_ENV
              fi
              if [ "$mountpoints" == "{ " ]; then
                mountpoints+="$next"
              else
                mountpoints+=", $next"
              fi
            fi
          done < "${{ github.workspace }}/fstab.yaml"

          mountpoints+=' }'
          folders+=' }'
          echo "Mount Point: $mountpoints"
          echo "Folder: $folders"
          echo "mountpoints=$mountpoints" >> $GITHUB_ENV
          echo "folders=$folders" >> $GITHUB_ENV

      - name: Check mountpoint destination
        run: |
          if [[ "${{ env.ROOT_MOUNT_POINT }}" != *"sharepoint"* ]]; then
            message="The mount point $ROOT_MOUNT_POINT is not a SharePoint mount point. ${{ env.ACTION_URL }}"
            echo $message
            echo "errorMessage=$message" >> $GITHUB_ENV
          fi

      - name: Report if mountpoint is not SharePoint
        if: ${{ env.errorMessage != '' }}
        uses: ./.github/actions/sta-status
        with:
          callbacks: ${{ github.event.inputs.aemy_callbacks }}
          context: ${{ github.event.inputs.aemy_context }}
          message: ${{ env.errorMessage }}
          status_type: error
          agent_name: upload-import-sp

      - name: Parse Mount Point
        run: |
          echo Parsing ${{ env.ROOT_MOUNT_POINT }}
          if [[ "${{ env.ROOT_MOUNT_POINT }}" =~ ^https://([a-zA-Z0-9.-]+)/(:f:/r)?(/sites/[a-zA-Z0-9_-]+)(/.*)?$ ]]; then
            SP_HOST="${BASH_REMATCH[1]}"
            SP_SITE="${BASH_REMATCH[3]}"
            SP_FOLDER="${BASH_REMATCH[4]}"
            echo "Domain: $SP_HOST"
            echo "Path: $SP_SITE"
            echo "Folder: $SP_FOLDER"

            echo "SP_HOST=$SP_HOST" >> $GITHUB_ENV
            echo "SP_SITE=$SP_SITE" >> $GITHUB_ENV
            echo "SP_FOLDER=$SP_FOLDER" >> $GITHUB_ENV
          else
            message="Could not determine SharePoint mountpoint from the fstab.yaml file (or the mount point parameter). Is '/' a SharePoint mountpoint? ${{ env.ACTION_URL }}"
            echo "errorMessage=$message" >> $GITHUB_ENV
          fi

      - name: Mount point detection check
        if: ${{ env.errorMessage != '' }}
        uses: ./.github/actions/sta-status
        with:
          callbacks: ${{ github.event.inputs.aemy_callbacks }}
          context: ${{ github.event.inputs.aemy_context }}
          message: ${{ env.errorMessage }}
          status_type: error
          agent_name: upload-import-sp

      - name: Progress 2 - Downloading zip
        uses: ./.github/actions/sta-status
        with:
          callbacks: ${{ github.event.inputs.aemy_callbacks }}
          context: ${{ github.event.inputs.aemy_context }}
          message: Downloading Import zip... (Step 2 of 5).
          status_type: progress
          agent_name: upload-import-sp

      - name: Download import zip file
        run: |
          echo "Downloading the import zip to ${{ env.temp_dir }}..."
          curl -Lo "${{ env.temp_dir }}/import.zip" "${{ github.event.inputs.zip_url }}" 2>&1 \
            || { echo "Import zip cannot be fetched."; }

      - name: Report download failure or extraction progress
        run: |
          if [ ! -f "${{ env.temp_dir }}/import.zip" ]; then
            message=" Import zip file not found. Check the output of the previous step. Exiting. ${{ env.ACTION_URL }}"
            echo "errorMessage=$message" >> $GITHUB_ENV
          else
            # Zip exists, check if it is a valid zip file.
            chmod 755 "${{ env.temp_dir }}/import.zip"
            ls -hl "${{ env.temp_dir }}/import.zip"
            if ! [[ $(file "${{ env.temp_dir }}/import.zip") =~ 'Zip archive data' ]]; then
              message=": Downloaded file is not a valid zip file. Did the URL expire (i.e. UnauthorizedDownloaded)? ${{ env.ACTION_URL }}"
              echo "errorMessage=$message" >> $GITHUB_ENV     
            fi
          fi

      - name: Zip validation error check
        if: ${{ env.errorMessage != '' }}
        uses: ./.github/actions/sta-status
        with:
          callbacks: ${{ github.event.inputs.aemy_callbacks }}
          context: ${{ github.event.inputs.aemy_context }}
          message: ${{ env.errorMessage }}
          status_type: error
          agent_name: upload-import-sp

      - name: Progress 3 - Extracting zip
        uses: ./.github/actions/sta-status
        with:
          callbacks: ${{ github.event.inputs.aemy_callbacks }}
          context: ${{ github.event.inputs.aemy_context }}
          message: Import Zip is downloaded. Now extracting its contents... (Step 3 of 5).
          status_type: progress
          agent_name: upload-import-sp

      - name: Extract import zip contents
        run: |
          unzip ${{ env.temp_dir }}/import.zip -d "${{ env.temp_dir }}/content"
          if [ $? -ne 0 ]; then
            message="Extraction of the Import zip failed. Please wait a few minutes and try again. ${{ env.ACTION_URL }}"
            echo "errorMessage=$message" >> $GITHUB_ENV   
          fi

      - name: Zip validation error check
        if: ${{ env.errorMessage != '' }}
        uses: ./.github/actions/sta-status
        with:
          callbacks: ${{ github.event.inputs.aemy_callbacks }}
          context: ${{ github.event.inputs.aemy_context }}
          message: ${{ env.errorMessage }}
          status_type: error
          agent_name: upload-import-sp

      - name: Progress 4 - Getting upload authorization
        uses: ./.github/actions/sta-status
        with:
          callbacks: ${{ github.event.inputs.aemy_callbacks }}
          context: ${{ github.event.inputs.aemy_context }}
          message: Zip extracted. Getting upload authorization... (Step 4 of 5).
          status_type: progress
          agent_name: upload-import-sp

      - name: Create Azure Access Token
        uses: ./.github/actions/authenticate
        id: azure-auth
        with:
          tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          client_id: ${{ secrets.AZURE_CLIENT_ID }}
          thumbnail: ${{ secrets.AZURE_THUMBPRINT }}
          key: ${{ secrets.AZURE_PFX_BASE64 }}

      - name: Access error check
        if: ${{ steps.azure-auth.outputs.access_token == '' }}
        uses: ./.github/actions/sta-status
        with:
          callbacks: ${{ github.event.inputs.aemy_callbacks }}
          context: ${{ github.event.inputs.aemy_context }}
          message: Failed to get access token. See the output of the previous step. ${{ env.ACTION_URL }}
          status_type: error
          agent_name: upload-import-sp

      - name: Progress 5 - Getting drive information
        uses: ./.github/actions/sta-status
        with:
          callbacks: ${{ github.event.inputs.aemy_callbacks }}
          context: ${{ github.event.inputs.aemy_context }}
          message: SharePoint access granted. Now fetching drive id... (Step 5 of 6).
          status_type: progress
          agent_name: upload-import-sp

      - name: Get site and drive id
        uses: ./.github/actions/sta-sp-drive
        with:
          token: ${{ steps.azure-auth.outputs.access_token }}
          sp_host: ${{ env.SP_HOST }}
          sp_site_path: ${{ env.SP_SITE }}
          sp_folder_path: ${{ env.SP_FOLDER }}

      - name: Drive id error check
        if: ${{ steps.get-drive-info.outputs.drive_id == '' }}
        uses: ./.github/actions/sta-status
        with:
          callbacks: ${{ github.event.inputs.aemy_callbacks }}
          context: ${{ github.event.inputs.aemy_context }}
          message: Could not extract the drive id from the SharePoint site. Check the output of the previous step. ${{ env.ACTION_URL }}
          status_type: error
          agent_name: upload-import-sp

      - name: Progress 6 - Uploading to SharePoint
        uses: ./.github/actions/sta-status
        with:
          callbacks: ${{ github.event.inputs.aemy_callbacks }}
          context: ${{ github.event.inputs.aemy_context }}
          message: Drive ID acquired. Now starting upload... (Step 6 of 6).
          status_type: progress
          agent_name: upload-import-sp

      - name: Run SharePoint Upload Action
        id: sharepoint-upload-step
        shell: bash
        run: |
          bash .github/actions/upload-sharepoint/upload-to-sharepoint.sh \
            "${{ env.temp_dir }}/content/docx" \
            "${{ env.ACCESS_TOKEN }}" \
            "${{ steps.get-drive-info.outputs.drive_id }}" \
            "${{ github.event.inputs.aemy_callbacks }}" \
            "${{ github.event.inputs.aemy_context }}"

      - name: Analyze upload results
        run: |
          echo "Successes: ${{ env.UPLOAD_SUCCESSES }}"
          echo "Failed Files: ${{ env.UPLOAD_FAILED_FILES }}"
          echo "Message: ${{ env.UPLOAD_MESSAGE }}"
          echo "Failures: ${{ env.UPLOAD_FAILURES }}"
          echo "Folder creation failures: ${{ env.UPLOAD_FOLDER_CREATION_FAILURES }}"
          
          if [ "${{ env.UPLOAD_FAILURES }}" -gt 0 ]; then
            message="Failed to upload ${{ env.UPLOAD_FAILURES }} files. Uploaded ${{ env.UPLOAD_SUCCESSES }} files successfully. ${{ env.ACTION_URL }}"
            echo "errorMessage=$message" >> $GITHUB_ENV
          fi

      - name: Progress 6 - Done upload
        uses: ./.github/actions/sta-status
        with:
          callbacks: ${{ github.event.inputs.aemy_callbacks }}
          context: ${{ github.event.inputs.aemy_context }}
          message: "✅ Success count: ${{ env.UPLOAD_SUCCESSES }}JS_LF❌ Failed count: ${{ env.UPLOAD_FAILURES }}JS_LF🚨 Failed files: ${{ env.UPLOAD_FAILED_FILES }}"
          status_type: progress
          agent_name: upload-import-sp

      - name: Upload error check
        if: ${{ env.errorMessage != '' }}
        uses: ./.github/actions/sta-status
        with:
          callbacks: ${{ github.event.inputs.aemy_callbacks }}
          context: ${{ github.event.inputs.aemy_context }}
          message: ${{ env.errorMessage }}
          status_type: error
          agent_name: upload-import-sp

      - name: Report upload success
        uses: ./.github/actions/sta-status
        with:
          callbacks: ${{ github.event.inputs.aemy_callbacks }}
          context: ${{ github.event.inputs.aemy_context }}
          message: Upload succeeded. Uploaded ${{ env.UPLOAD_SUCCESSES }} files.
          status_type: ok
          agent_name: upload-import-sp

      - name: Clean up temporary files
        if: always()
        run: |
          # Delete the temp dir immediately, having system delete it eventually as a redundancy.
          rm -rf "${{ env.temp_dir }}"
